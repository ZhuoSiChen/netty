//服务端的socket在哪里初始化在哪里调用jdk底层的socketAPI去创建
$1
//在哪里accept socket的连接


//1.创建服务端channel channel是对jdk底层的SocketChannel();的抽象
//2.初始化服务端channel
    2.1初始化基本属性,
    2.2添加逻辑处理器
//3.注册selector
1-1服务端启动流程
b.bind(PORT);
    ~
    doBind(final SocketAddress localAddress)
        ChannelFuture regFuture = initAndRegister();
            channel = channelFactory.newChannel();//在创建Bootstrap里传进的NioServerSocketChannel(作用:基于NIO选择器的实现来接受新连接)  细看ServerBootstrap.channel()方法
                clazz.getConstructor().newInstance();//在此反射创建服务端的channel
                    NioServerSocketChannel()
                        this(newSocket(DEFAULT_SELECTOR_PROVIDER));
                        newSocket(DEFAULT_SELECTOR_PROVIDER)
                            provider.openServerSocketChannel(); //$1 创建jdk底层的SocketChannel();
                        this(newSocket(DEFAULT_SELECTOR_PROVIDER));
                            NioServerSocketChannel(ServerSocketChannel channel)
                                super(null, channel, SelectionKey.OP_ACCEPT);//super:AbstractNioMessageChannel 在channel上注册OP_ACCEPT事件
                                    super(parent, ch, readInterestOp);//super:AbstractNioChannel 是对 channel 的抽象 无论是客户端还是服务端
                                        super(parent);//AbstractChannel
                                            this.parent = parent;//设置parent
                                            id = newId();//设置Id
                                            unsafe = newUnsafe();//调用的是 AbstractNioMessageChannel.newUnsafe() tcp底层的读写操作有关
                                                new NioMessageUnsafe();//调用 NioMessageUnsafe
                                            pipeline = newChannelPipeline();//客户端与服务端的逻辑链
                                    this.ch = ch;//保存channel
                                    his.readInterestOp = readInterestOp; //保存 SelectionKey
                                    ch.configureBlocking(false);//设置非阻塞的调用
                                //配置TCP参数 javaChannel()返回的是SelectableChannel 也就是ServerSocketChannel的父类
                                config = new NioServerSocketChannelConfig(this, javaChannel().socket());
            init(channel);//初始化 channel
                setChannelOptions(channel, options, logger);//保存用户自定义的属性与配置
            ChannelFuture regFuture = config().group().register(channel);
                config().group()//config().group(): bossGroup
                register(channel);
                    next().register(channel);
                    next();
                        chooser.next();//因为 bossGroup 线程数为 1 是 2的指数所以采用的是 PowerOfTwoEventExecutorChooser
                            executors[idx.getAndIncrement() & executors.length - 1];
                    register(channel);//调用的是 SingleThreadEventLoop 里的register
                        register(new DefaultChannelPromise(channel, this));
                        new DefaultChannelPromise(channel, this)
                            super(executor);
                                this.executor = checkNotNull(executor, "executor");//DefaultPromise
                            this.channel = checkNotNull(channel, "channel");
                        register(new DefaultChannelPromise(channel, this))
                            ObjectUtil.checkNotNull(promise, "promise");
                            promise.channel().unsafe().register(this, promise);
            ChannelPipeline p = channel.pipeline();
            p.addLast();
            //把一个任务扔进eventLoop()
            ch.eventLoop().execute(new Runnable() {
                @Override
                public void run() {
                    pipeline.addLast(new ServerBootstrapAcceptor(
                            ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));
                }
            });

            //config().group() = SingleThreadEventLoop对象
            //把channel注册进EventLoop上
            //注册selector
            ChannelFuture regFuture = config().group().register(channel);
                ~
                promise.channel().unsafe().register(this, promise);//promise:DefaultChannelPromise
                //会调用AbstractChannel下的
                    register(EventLoop eventLoop, final ChannelPromise promise)
                         AbstractChannel.this.eventLoop = eventLoop;//绑定线程
                         register0(promise);//实际注册
                            doRegister();//调用jdk底层注册 javaChannel() = NioSocketChannel
                                //将当前channel作为attachment绑定到 selector 上
                                //下面这句不明白
                                selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this);
                            //下面这句实际上调用的是new com.imooc.netty.ch3.ServerHandler()的add事件
                            pipeline.invokeHandlerAddedIfNeeded();
                            //下面这句实际上调用的是new com.imooc.netty.ch3.ServerHandler()的register事件
                            pipeline.fireChannelRegistered();
        doBind0()
            //channel:AbstractChannel
            channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);
                pipeline.bind(localAddress, promise);
                    ~
                    //下面的是AbstractChannel类里的
                    bind(final SocketAddress localAddress, final ChannelPromise promise)
                        //调用jdk底层的绑定
                        doBind(localAddress);
                            NioServerSocketChannel.doBind(SocketAddress localAddress)
                        //调用fireChannelActive
                        pipeline.fireChannelActive();




//创建NioEventLoopGroup

this(nThreads, executor, SelectorProvider.provider());
  ~
  super(nThreads == 0 ? DEFAULT_EVENT_LOOP_THREADS : nThreads, executor, args);
     ~
     this(nThreads, executor, DefaultEventExecutorChooserFactory.INSTANCE, args);
         protected MultithreadEventExecutorGroup(int nThreads, Executor executor,EventExecutorChooserFactory chooserFactory, Object... args)
            executor = new ThreadPerTaskExecutor(newDefaultThreadFactory());//创建线程执行器,每次创建一个任务后执行
                newDefaultThreadFactory();
                    new DefaultThreadFactory(getClass());//这里实际上是getClass():NioEventThreadGroup
                    this(toPoolName(poolType), daemon, priority);//这里实际上获得NioEventThreadGroup
                    DefaultThreadFactory(String poolName, boolean daemon, int priority, ThreadGroup threadGroup);
                    //此类的重要方法为Thread newThread(Runnable r)
                    //这个FastThreadLocalThread包装了个threadLocalMap？这个threadLocalMap干什么用的呢?
                    //new FastThreadLocalThread(threadGroup, r, name);
            children = new EventExecutor[nThreads];//保存线程执行器
            children[i] = newChild(executor, args);
            //创建 NioEventLoop
            //1.保存线程执行器
            //2.创建mpscQueue
            //3.创建selector 通过数组实现替换掉jdk实现的hashSet实现
            //4.创建NioEventLoop
                ~
                NioEventLoop(NioEventLoopGroup parent, Executor executor, SelectorProvider selectorProvider,
                                                 SelectStrategy strategy, RejectedExecutionHandler rejectedExecutionHandler)
                                     super(parent, executor, false, DEFAULT_MAX_PENDING_TASKS, rejectedExecutionHandler);
                                        ~
                                        this.executor = ObjectUtil.checkNotNull(executor, "executor");
                                        taskQueue = newTaskQueue(this.maxPendingTasks);
                                            PlatformDependent.<Runnable>newMpscQueue();
                                            //SPSC队列是指单一生产者/单一消费者队列。MPSC队列是指多生产者/单一消费者队列。
                                     SelectorTuple selectorTuple = openSelector();
                                        unwrappedSelector = provider.openSelector();//创建一个selector
            //每次有新任务进来的时候为每个任务创建线程选择器
            //为了给新连接绑定对应的NioEventLoop对应的方法是MultithreadEventExecutorGroup.next()方法
            //优化1.判断是否是2的幂
            //如果不是的话
            chooser = chooserFactory.newChooser(children);
                new PowerOfTwoEventExecutorChooser(executors);
            //每次执行任务都会创建一个线程实体


启动NioEventLoop触发器

    1.服务端启动绑定端口

    2.新连接接入通过chooser绑定一个NioEventLoop

    1.1 bind方法封装成task进入到NioEventLoop的execute方法。
    1.2 netty判断是否是Nio线程调用startThread方法开始尝试创建线程
    1.3 通过线程执行器创建作用：每次执行一个任务的时候都会创建一个线程,也就是底层的FastThreadLocalThread
    1.4 保存线程,判断后续的操作是否是本身   如果不是就封装成一个Task扔到TaskQueue里串行执行最后调用NioEventLoop的run方法启动

        //这里的eventLoop是通过在启动时通过 initAndRegister 方法绑定上去的。execute是SingleThreadEventExecutor的execute方法
    //#1.1
    doBind0
        channel.eventLoop().execute(new Runnable() {
                    @Override
                    public void run() {
                        if (regFuture.isSuccess()) {
                            channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);
                        } else {
                            promise.setFailure(regFuture.cause());
                        }
                    }
                });
            execute()//SingleThreadEventExecutor.execute
                boolean inEventLoop = inEventLoop();//判断当前执行的是否为当前的EventLoop线程,首次创建为false
                startThread()
                    state == ST_NOT_STARTED
                    doStartThread
                        //这里的executor是前面创建的ThreadPerTaskExecutor
                        executor.execute//这里会创建一个FastThreadLocalThread并启动
                        thread = Thread.currentThread();//保存线程到NioEventLoop的Thread变量里
                        //important!
                        //SingleThreadEventExecutor.this:NioEventLoop
                        SingleThreadEventExecutor.this.run();
                addTask(task);
NioEventLoop执行
    SingleThreadEventExecutor.this.run();//SingleThreadEventExecutor.this:NioEventLoop
        for (;;)//轮询注册到这个NioEventLoop上面的IO事件
        select(wakenUp.getAndSet(false));
        processSelectedKeys();
        runAllTasks();//处理外部线程扔到TaskQueue上的任务 mpsc
检测IO事件
1.deadline以及任务穿插逻辑处理.
  查看是否有定时任务需要处理.截止时间的计算
2.如果没有
    阻塞式select
3.避免jdk空轮询的bug
    select(wakenUp.getAndSet(false));//wakeUp标示当前select操作是否是唤醒状态 表示这个select操作为未唤醒状态
NioEventLoop
NioEventLoop创建
children[i] = newChild(executor, args);
//创建 NioEventLoop
//1.保存线程执行器
//2.创建mpscQueue
//3.创建selector 通过数组实现替换掉jdk实现的hashSet实现
//4.创建NioEventLoop
NioEventLoop的启动
channel.eventLoop().execute启动
NioEventLoop
    SingleThreadEventExecutor.startThread()
    1.保存当前Thread到成员变量SingleThreadEventExecutor.thread中
    线程是FastThreadLocalThread
NioEventLoop的执行逻辑
1.检测IO事件
2.处理IO事件
3.执行任务队列


Netty是在哪里检测有新连接接入的？
新连接是怎样注册到NioEventLoop线程的？

netty新连接接入处理逻辑
检测新连接,新连接通过服务端绑定的 selector 轮询出 Accept 事件后
基于 JDK NioSocketChannel 创建netty的 NioSocketChannel 也就是客户端 Channel
接着,netty给客户端分配一个 NioEventLoop ,并把该 channel 注册到该 EventLoop 对应的 selector 上,后续的读写都用该 selector 进行管理.
向该 selector 注册读事件.注册过程与服务端注册Accept事件复用同一段逻辑.

EventLoop 新连接接入
    private void processSelectedKey(SelectionKey k, AbstractNioChannel ch)//入口
        unsafe.read() //NioMessageUnsafe
            final RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();//控制连接接入的速率
            do {
                int localRead = doReadMessages(readBuf);
                    SocketChannel ch = SocketUtils.accept(javaChannel());
                    buf.add(new NioSocketChannel(this, ch));
                    //创建NioSocketChannel
                    //javaChannel()获取服务端启动过程中创建的jdk底层的channel
                    //调用jdk底层的Accept方法返回jdk底层的channel
                    //把jdk底层的Channel扔到buf
                allocHandle.incMessagesRead(localRead);
            } while (allocHandle.continueReading());
            pipeline.fireChannelRead(readBuf.get(i));//然后调用 channelRead 方法
            //之后做 新连接NioEventLoop的分配和selector注册

创建NioSocketChannel
buf.add(new NioSocketChannel(this, ch));
    super(parent, socket);
        super(parent, ch, SelectionKey.OP_READ);
            super(parent);
                this.parent = parent;
                id = newId();
                unsafe = newUnsafe();
                pipeline = newChannelPipeline();
            this.ch = ch;
            this.readInterestOp = readInterestOp;
            ch.configureBlocking(false);
    config = new NioSocketChannelConfig(this, socket.socket());
        DefaultSocketChannelConfig
            setTcpNoDelay(true);
Netty中 Channel 的分类
    NioServerSocketChannel
    NioSocketChannel
    Unsafe
新连接 NioEventLoop 的分配和 selector 注册

服务端Channel的pipeline构成Head->ServerBootstrapAcceptor->tail //ServerBootstrapAcceptor 是在上面initAndRegister()方法注册上去的

channelRead 方法做的事情 ServerBootstrapAcceptor 类名
1.添加childHandler
2.设置options和attrs options跟底层TCP读写 在启动过程中保存到ServerBootstrap的childOptions 在创建new ServerBootstrapAcceptor(ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs)传递到ServerBootstrapAcceptor
3.选择NioEventLoop并注册selector
unsafe.read()//NioMessageUnsafe
    pipeline.fireChannelRead(readBuf.get(i));
        channelRead(ChannelHandlerContext ctx, Object msg)//是在ServerBootstrap.childHandler(new ChannelInitializer<SocketChannel>()添加的)添加后会remove自身
            child.pipeline().addLast(childHandler);//1.添加childHandler
            setChannelOptions(child, childOptions, logger); //2.设置options和attrs
            childGroup.register(child).addListener(new ChannelFutureListener()//3.选择NioEventLoop并注册selector
                next().register(channel);
                    ~
                    chooser.next();
                    register(channel)
                        register(new DefaultChannelPromise(channel, this));
                            promise.channel().unsafe().register(this, promise);
                                EmbeddedUnsafe.this.register(eventLoop, promise);
                                    AbstractChannel.this.eventLoop = eventLoop;
                                        if (eventLoop.inEventLoop()) 返回false
                                        else eventLoop.execute(new Runnable() {public void run() {register0(promise);}});

pipeline概述


向 pipeline 添加ChannelHandler pipeline.addLast()处理流程
1.判断是否重复添加
2.创建节点并添加至链表 把每个节点包装成channelHandlerContext 节点是channelHandlerContext
3.回调添加完成事件
    addLast(ChannelHandler... handlers)
        addLast(null, handlers);
            addLast(executor, null, h);//for循环添加handler executor为NULL
                checkMultiplicity(handler);//1.判断是否重复添加
                    ChannelHandlerAdapter h = (ChannelHandlerAdapter) handler;
                    if (!h.isSharable() && h.added){//判断handler是否被@Sharable注解
                    throw new ChannelPipelineException(h.getClass().getName() +" is not a @Sharable handler, so can't be added or removed multiple times.");
                    }
                    h.added = true;
                newCtx = newContext(group, filterName(name, handler), handler);//2.创建节点并添加至链表 filterName
                    filterName(name, handler)
                        return generateName(handler);
                            Map<Class<?>, String> cache = nameCaches.get();
                            name = generateName0(handlerType);
                                StringUtil.simpleClassName(handlerType) + "#0";
                            cache.put(handlerType, name);//缓存 handlerType 的
                        checkDuplicateName(name);
                            context0(name);
                                AbstractChannelHandlerContext context = head.next;
                                if (context.name().equals(name)){//这里从head遍历到tail pipeline上的AbstractChannelHandlerContext 查看 name 是否相等
                                return context;
                                }
                newCtx = newContext(group, filterName(name, handler), handler);// 创建 ChannelHandlerContext
                    new DefaultChannelHandlerContext(this, childExecutor(group), name, handler);
                addLast0(newCtx);//2.创建节点并添加至链表
                     AbstractChannelHandlerContext prev = tail.prev;
                     newCtx.prev = prev;
                     newCtx.next = tail;
                     prev.next = newCtx;
                     tail.prev = newCtx;

ByteBuf的分类
分别从
    safe 与 unsafe 根据jdk底层是否有unsafe对象自动判别 unsafe根据 内存地址加偏移量拿到数据,非unsafe通过数组加下标或者通过jdk底层的的api byteBuffer 去拿数据
    pooled 与 unpooled
    Direct与Heap
    上分类

ByteBuf 的继承关系图
    AbstractByteBuf
        PooledHeapByteBuf
            PooledUnsafeHeapByteBuf
        PooledDirectByteBuf
            PooledUnsafeDirectByteBuf
        UnpooledHeapByteBuf
            UnpooledUnsafeHeapByteBuf

ByteBufAllocator
    AbstractByteBufAllocator
        1.PooledByteBufAllocator //相当于在一个池子里拿内存
            F:
                PoolArena<byte[]>[] heapArenas;
                PoolArena<ByteBuffer>[] directArenas;
                int tinyCacheSize;
                int smallCacheSize;
                int normalCacheSize;
                List<PoolArenaMetric> heapArenaMetrics;
                List<PoolArenaMetric> directArenaMetrics;
                PoolThreadLocalCache threadCache; //类似于ThreadLocal
                int chunkSize;
                PooledByteBufAllocatorMetric metric;
            method:
                newDirectBuffer(int initialCapacity, int maxCapacity)
                    PoolThreadCache cache = threadCache.get(); //拿到当前线程缓存
                    PoolArena<ByteBuffer> directArena = cache.directArena;
        2.UnpooledByteBufAllocator    //调用系统api直接实现
            F:
            UnpooledByteBufAllocatorMetric metric = new UnpooledByteBufAllocatorMetric();
            boolean disableLeakDetector;
            boolean noCleaner;


UnpooledHeapByteBuf 与 UnpooledUnsafeHeapByteBuf 的区别
UnpooledHeapByteBuf 的创建的
    super(maxCapacity);
    this.alloc = alloc;
    setArray(allocateArray(initialCapacity));
        allocateArray(initialCapacity)
            new byte[initialCapacity];
        setArray(allocateArray(initialCapacity));
            array = initialArray;
            tmpNioBuf = null;
    setIndex(0, 0);
        setIndex0(readerIndex, writerIndex);
            this.readerIndex = readerIndex;
            this.writerIndex = writerIndex;
UnpooledUnsafeHeapByteBuf 的创建
    调用的是UnpooledHeapByteBuf的构造函数


UnpooledHeapByteBuf
    protected byte _getByte(int index) {
        return HeapByteBufUtil.getByte(array, index);
    }
   _getByte(int index)
        HeapByteBufUtil.getByte(array, index);
             return memory[index];
UnpooledUnsafeHeapByteBuf
    @Override
    protected byte _getByte(int index) {
        return UnsafeByteBufUtil.getByte(array, index);
    }
    _getByte(int index)
        UnsafeByteBufUtil.getByte(array, index);
            PlatformDependent.getByte(address);
                PlatformDependent0.getByte(address);
                    return UNSAFE.getByte(address);
